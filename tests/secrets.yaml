name: okms-cli secrets test suite
description: Test the OKMS secrets subcommand
testcases:
  - name: random-string
    steps:
    - script: echo {{randAlpha 8 | lower}}
      info: response time is {{.result.timeseconds}}
      vars:
        content:
          from: result.systemout


  - name: 001 - Create Secret
    steps:
      - name: Create a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret create --cas-required=true --deactivate-version-after="1d" --max-versions=10 {{.random-string.content}} data=data
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldBeTrue
          - result.systemoutjson.metadata.current_version ShouldEqual '1'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldMatchRegex ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$


  - name: 002 - Create an existing Secret
    steps:
      - name: Create an existing Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret create {{.random-string.content}} data=data
        assertions:
          - result.code ShouldEqual 1

  - name: 003 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldBeTrue
          - result.systemoutjson.metadata.current_version ShouldEqual '1'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotBeEmpty
          - result.systemoutjson.version.created_at ShouldMatchRegex ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
          - result.systemoutjson.version.data ShouldContainKey "data"
          - result.systemoutjson.version.data.data ShouldEqual "data"
          - result.systemoutjson.version.id ShouldEqual "1"

  - name: 004 - Get Secret without data
    steps:
      - name: Get a Secret without data
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=false
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '1'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldEqual "" 

  - name: 005 - Update the secret
    steps:
      - name: Update the secret 
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret update {{.random-string.content}} --cas=1 data=new_data 
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '2'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldBeEmpty

  - name: 006 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '2'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldContainKey "data"
          - result.systemoutjson.version.data.data ShouldEqual "new_data"
          - result.systemoutjson.version.id ShouldEqual "2"

  - name: 007 - Create new version
    steps:
      - name: Update the secret and its metadata
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        # We change cas_required and expect the result to be effective immediatly, so cas should not be required fot this 
        args: secret version create {{.random-string.content}} --cas=2 data=new_data_again 
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.created_at ShouldNotEqual ""
          - result.systemoutjson.state ShouldEqual "active"
          - result.systemoutjson.id ShouldEqual "3"

  - name: 008 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '3'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldContainKey "data"
          - result.systemoutjson.version.data.data ShouldEqual "new_data_again"
          - result.systemoutjson.version.id ShouldEqual "3"

  - name: 009 - Get Secret Version
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret version get {{.random-string.content}} --version=2 --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.created_at ShouldNotEqual ""
          - result.systemoutjson.data ShouldContainKey "data"
          - result.systemoutjson.data.data ShouldEqual "new_data"
          - result.systemoutjson.id ShouldEqual "2"
          - result.systemoutjson.state ShouldEqual "active"


  - name: 010 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --version=2 --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '3'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldContainKey "data"
          - result.systemoutjson.version.data.data ShouldEqual "new_data"
          - result.systemoutjson.version.id ShouldEqual "2"


  - name: 011 - Update the secret's version state
    steps:
      - name: Update the secret's version state
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        # We change cas_required and expect the result to be effective immediatly, so cas should not be required fot this 
        args: secret version update {{.random-string.content}} --state activated
        assertions:
          - result.code ShouldEqual 1

  - name: 012 - Update the secret's version state
    steps:
      - name: Update the secret's version state
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        # We change cas_required and expect the result to be effective immediatly, so cas should not be required fot this 
        args: secret version update {{.random-string.content}} --state deactivated --version=3
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.created_at ShouldNotEqual ""
          - result.systemoutjson.deactivated_at ShouldNotEqual ""
          - result.systemoutjson.data ShouldEqual ""
          - result.systemoutjson.id ShouldEqual "3"

  - name: 013 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '3'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldBeEmpty
          - result.systemoutjson.version.id ShouldEqual "3"
          - result.systemoutjson.version.state ShouldEqual "deactivated"


  - name: 014 - Update the secret and metadata
    steps:
      - name: Update the secret and its metadata
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        # We change cas_required and expect the result to be effective immediatly, so cas should not be required fot this 
        args: secret update {{.random-string.content}} --cas-required=false data=yet_new_data 
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "false" 
          - result.systemoutjson.metadata.current_version ShouldEqual '4'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""

  - name: 015 - Get Secret
    steps:
      - name: Get a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret get {{.random-string.content}} --include-data=true
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.metadata.cas_required ShouldEqual "true" 
          - result.systemoutjson.metadata.current_version ShouldEqual '4'
          - result.systemoutjson.metadata.oldest_version ShouldEqual '0'
          - result.systemoutjson.metadata.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.metadata.max_versions ShouldEqual "10"
          - result.systemoutjson.metadata.updated_at ShouldNotEqual ""
          - result.systemoutjson.version.created_at ShouldNotEqual ""
          - result.systemoutjson.version.data ShouldContainKey "data"
          - result.systemoutjson.version.data.data ShouldEqual "yet_new_data"
          - result.systemoutjson.version.id ShouldEqual "4"


  - name: 016 - List Secrets 
    steps: 
      - name: List all secrets 
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret list 
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.results ShouldHaveLength 3
          - result.systemoutjson.total_count ShouldEqual 3

  - name: 017 - List Secrets Versions
    steps: 
      - name: List all version of a secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret version list {{.random-string.content}}  
        assertions:
          - result.code ShouldEqual 0    
          - result.systemoutjson ShouldHaveLength 4

  - name: 018 - Delete Secret
    steps:
      - name: Delete a Secret
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret delete {{.random-string.content}}
        assertions:
          - result.code ShouldEqual 0
  
  - name: 019 - Secret config 
    steps: 
      - name: Update config 
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret config update --deactivate-after="1d" --max-versions=24 
        assertions:
          - result.code ShouldEqual 0
      - name: Read config 
        info: response time is {{.result.timeseconds}} and response code is {{.result.code}} result is {{.result}}
        type: okms-cmd
        args: secret config get 
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.deactivate_version_after ShouldEqual "1d"
          - result.systemoutjson.max_versions ShouldEqual "24"
          
